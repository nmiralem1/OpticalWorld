package ba.unsa.etf.rpr.dao;

import ba.unsa.etf.rpr.business.GlassesManager;
import ba.unsa.etf.rpr.domain.Glasses;


import ba.unsa.etf.rpr.exceptions.GlassesException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

public class GlassesDaoTest {

    Glasses glasses1 = new Glasses(13,"naocale","lenses","/images/lece1.png",130);
    Glasses glasses2 = new Glasses(14,"naocale","lenses","/images/lece1.png",160);

    private GlassesManager gm;
    private Glasses g;
    private GlassesDaoSQLImpl gmdao;
    private List<Glasses> glasses;

    @Test
    public void testGettersAndSetters() {
        glasses1.setId(1);
        assertEquals(1, glasses1.getId());
    }
    @Test
    public void testEquals() {
        assertNotEquals(glasses1, glasses2);
    }

    @Test
    public void testHashCode() {
        assertNotEquals(glasses1.hashCode(), glasses2.hashCode());
    }

    /**
     * This method will be called before each test method
     */
    @BeforeEach
    public void initializeObjectsWeNeed() {
        gm = Mockito.mock(GlassesManager.class);
        g = new Glasses();
        g.setName("Naocale1");
        g.setId(50);
        g.setPrice(50);
        g.setCategory("lenses");
        gmdao = Mockito.mock(GlassesDaoSQLImpl.class);
        glasses = new ArrayList<>();
        glasses.addAll(Arrays.asList(new Glasses(15,"naocale","lenses","/images/lece1.png",160), new Glasses(5,"naocale","lenses","/images/lece1.png",160)));
    }

    /**
     * Adding category that already exists
     * @throws GlassesException
     */
    @Test
    void add() throws GlassesException {
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::glassesDao).thenReturn(gmdao);
        /*
        An exception will be thrown because our instance of Category.java class has value for id
         */
        when(DaoFactory.glassesDao().getAll()).thenReturn(glasses);
        Mockito.doCallRealMethod().when(gm).add(g);
        GlassesException ge = Assertions.assertThrows(GlassesException.class, () -> {
            gm.add(g);}, "Can't add glasses with ID. ID is autogenerated");

        Assertions.assertEquals("Can't add category with ID. ID is autogenerated", ge.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::glassesDao);
        Mockito.verify(gm).add(g);
        daoFactoryMockedStatic.close();
    }

}
